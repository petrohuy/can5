def func1(arg1, arg2):
    var7 = func2(arg2, arg1)
    var28 = var10(var7, arg2)
    var33 = func7(arg2, var7)
    var34 = var33 + (958732985 ^ var33 + 851992516)
    var35 = (var28 & arg1) | arg1 + -799
    var36 = 14 | var33 ^ var35 ^ var7
    var37 = var33 & (220 + var36) & var28
    var38 = var34 + var36 & (var37 & arg2)
    var39 = var35 | (-445 + (arg1 ^ var33))
    var40 = var35 & var36
    var41 = var33 | var28 & arg2 - var40
    var42 = ((-156 ^ -352620311) | arg1) & var33
    var43 = var40 ^ (var39 & arg1) + var34
    var44 = arg2 - var33 - (var37 - var33)
    result = var28 - 642046695
    return result
def func7(arg29, arg30):
    var31 = 0
    for var32 in range(17):
        var31 += var31 & (arg29 ^ arg29)
    return var31
def func5(arg11, arg12):
    var17 = func6(arg11, arg12)
    var18 = var17 ^ (-642 ^ var17 & var17)
    var19 = 818 - ((arg11 + 27260898) - var17)
    var20 = var18 - 262149934
    var21 = (969 - arg11) | (arg12 & 842)
    var22 = var18 ^ arg12
    var23 = arg11 & var17 ^ var20 + -1814473932
    var24 = var23 & var17 + var20 & var20
    var25 = (var17 ^ var21 - 951205079) - var21
    var26 = var18 - var22 ^ var23 + var22
    if var26 < var18:
        var27 = var23 & var23
    else:
        var27 = arg11 - (var22 ^ var23) | var23
    result = var24 + var26 | arg11
    return result
def func6(arg13, arg14):
    var15 = 0
    for var16 in [(8 & arg13) - -10 for i in range(22)]:
        var15 += (arg14 ^ arg14) - var15
    return var15
def func4():
    closure = [-6]
    def func3(arg8, arg9):
        closure[0] += func5(arg8, arg9)
        return closure[0]
    func = func3
    return func
var10 = func4()
def func2(arg3, arg4):
    var5 = 0
    for var6 in xrange(50):
        var5 += arg3 - var5
    return var5
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
